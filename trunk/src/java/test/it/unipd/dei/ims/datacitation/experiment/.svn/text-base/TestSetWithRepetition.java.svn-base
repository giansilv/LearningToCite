package it.unipd.dei.ims.datacitation.experiment;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.xpath.XPathExpressionException;

import org.apache.commons.io.FilenameUtils;
import org.basex.query.QueryException;
import org.xml.sax.SAXException;

import it.unipd.dei.ims.datacitation.buildcitation.PathMatcher;
import it.unipd.dei.ims.datacitation.buildcitation.ReferenceBuilder;
import it.unipd.dei.ims.datacitation.citationprocessing.PathProcessor;
import it.unipd.dei.ims.datacitation.config.InitDataCitation;
import it.unipd.dei.ims.datacitation.evaluation.CalculateMeasure;
import it.unipd.dei.ims.datacitation.groundtruth.GroundTruthBuilder;
import it.unipd.dei.ims.datacitation.training.TrainingSetBuilder;

public class TestSetWithRepetition {

	public static void main(String[] args) throws XPathExpressionException, IOException, SAXException,
			ParserConfigurationException, QueryException, TransformerFactoryConfigurationError, TransformerException {

		int[] sizes = {20, 80, 30, 70, 40, 60, 50};
		// int[] sizes = {5};
		String[] measures = { "precision", "recall", "fscore" };

		for (int size : sizes) {
			for (String measure : measures) {
				TestSetWithRepetition.testWithRepetitions(size, measure);
			}

		}

	}

	private static void testWithRepetitions(int size, String optimizationMeasure)
			throws IOException, XPathExpressionException, SAXException, ParserConfigurationException, QueryException,
			TransformerFactoryConfigurationError, TransformerException {
		// load the config properties
		InitDataCitation prop = new InitDataCitation();

		prop.loadProperties();

		// set the size for this experiment
		prop.setProperty("datacitation.trainingset.size", String.valueOf(size));
		prop.setProperty("datacitation.training.optimizationMeasure", optimizationMeasure);
		prop.saveProperties();

		// the number of repetitions for the test given a test set size
		int repetitions = Integer.parseInt(prop.getProperty("datacitation.test.repetitions"));

		// where the test set files are stored
		String folderPath = prop.getProperty("datacitation.path.testset");

		// read the directory containing the test xpath files
		File xpathTestFolder = new File(folderPath.concat("_XPath"));

		// read the ground truth for test
		GroundTruthBuilder gtb = new GroundTruthBuilder();
		HashMap<String, String> gt = gtb.readGroundTruth(true);

		int filesNum = 0;
		for (final File fileEntry : xpathTestFolder.listFiles()) {
			// if it is a file and not hidden nor a directory
			if (fileEntry.isFile() && !fileEntry.isHidden() && !fileEntry.isDirectory()) {
				filesNum++;
			}
		}

		String[] testFiles = new String[filesNum];
		String[] citXpaths = new String[filesNum];

		// the file where the results will be stored.
		File precResultFile = new File(prop.getProperty("datacitation.path.resultDir").concat(File.separator)
				.concat("test_precision_optimizedWith")
				.concat(prop.getProperty("datacitation.training.optimizationMeasure")).concat("_")
				.concat(String.valueOf(size)).concat(".csv"));

		File recallResultFile = new File(prop.getProperty("datacitation.path.resultDir").concat(File.separator)
				.concat("test_recall_optimizedWith")
				.concat(prop.getProperty("datacitation.training.optimizationMeasure")).concat("_")
				.concat(String.valueOf(size)).concat(".csv"));

		File fscoreResultFile = new File(prop.getProperty("datacitation.path.resultDir").concat(File.separator)
				.concat("test_fscore_optimizedWith")
				.concat(prop.getProperty("datacitation.training.optimizationMeasure")).concat("_")
				.concat(String.valueOf(size)).concat(".csv"));

		FileWriter precWriterW = new FileWriter(precResultFile);
		BufferedWriter precWriter = new BufferedWriter(precWriterW);
		
		FileWriter recallWriterW = new FileWriter(recallResultFile);
		BufferedWriter recallWriter = new BufferedWriter(recallWriterW);
		
		FileWriter fscoreWriterW = new FileWriter(fscoreResultFile);
		BufferedWriter fscoreWriter = new BufferedWriter(fscoreWriterW);

		int i = 0;
		// loop over the references
		for (final File fileEntry : xpathTestFolder.listFiles()) {
			// if it is a file and not hidden nor a directory
			if (fileEntry.isFile() && !fileEntry.isHidden() && !fileEntry.isDirectory()) {

				String file = fileEntry.getAbsolutePath();

				if (new File(file).exists()) {

					citXpaths[i] = file;
					testFiles[i] = file.replace("-0-xpath.txt", ".xml").replace("_XPath", "");

					i++;
				}

			}

		}

		// matrixes of results
		// the rows are the "topics" and the columns are the repetitions
		double[][] precMatrix = new double[filesNum][repetitions];

		double[][] recallMatrix = new double[filesNum][repetitions];

		double[][] fscoreMatrix = new double[filesNum][repetitions];

		/*
		 * If we are using the whole training set, we do not need to repeat the
		 * experiment
		 */
		if (size == 100) {
			repetitions = 1;
		}

		// repeat the experiment
		for (int r = 0; r < repetitions; r++) {

			// get the model through training and validation
			TrainingSetBuilder tsb = new TrainingSetBuilder();

			tsb.trainAndValidate();

			// do the test
			for (int f = 0; f < filesNum; f++) {

				byte[] encoded = Files.readAllBytes(Paths.get(citXpaths[f]));

				String xPathNode = new String(encoded, "UTF-8");

				PathProcessor p = new PathProcessor(xPathNode);

				PathMatcher match = new PathMatcher(p.getProcessedPath());

				ArrayList<String> paths = match.getCandidatePaths();

				ReferenceBuilder refB = new ReferenceBuilder(xPathNode, new File(testFiles[f]).getAbsolutePath(),
						paths);

				refB.buildReference();

				// the created reference that has to be evaluated
				String mr = refB.getMachineReadableReference();

				// the ground truth machine-readable
				// reference
				String mrgt = gt.get(FilenameUtils.removeExtension(new File(citXpaths[f]).getName()));

				precMatrix[f][r] = CalculateMeasure.precision(mr, mrgt);

				precWriter.write(String.valueOf(precMatrix[f][r]) + ";");

				recallMatrix[f][r] = CalculateMeasure.recall(mr, mrgt);

				recallWriter.write(String.valueOf(recallMatrix[f][r]) + ";");

				fscoreMatrix[f][r] = CalculateMeasure.fscore(mr, mrgt);

				fscoreWriter.write(String.valueOf(fscoreMatrix[f][r]) + ";");

			}
			precWriter.write("\n");
			recallWriter.write("\n");
			fscoreWriter.write("\n");

		} // end repetitions

		precWriter.flush();
		precWriter.close();

		recallWriter.flush();
		recallWriter.close();

		fscoreWriter.flush();
		fscoreWriter.close();

	}

}
